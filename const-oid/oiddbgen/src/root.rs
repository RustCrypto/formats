use crate::{node::Node, spec::Spec};

use std::collections::BTreeMap;

use proc_macro2::{Ident, Span, TokenStream};
use quote::quote;

#[derive(Clone, Debug, Default)]
pub struct Root(BTreeMap<Ident, Spec>);

impl Root {
    pub fn parse_line(&mut self, line: &str) {
        let (name, next) = line.split_at(line.find(',').unwrap());
        let (.., next) = next[1..].split_at(next[1..].find(',').unwrap());
        let (obji, spec) = next[1..].split_at(next[1..].find(',').unwrap());

        let arc: Option<usize> = obji.find('.').and_then(|i| obji.split_at(i).0.parse().ok());
        if arc.is_some() && spec.trim().starts_with(",[RFC") {
            let name = name.trim().to_string();
            let obji = obji.trim().to_string();
            let spec = Ident::new(
                &spec[2..][..spec.len() - 3].to_ascii_lowercase(),
                Span::call_site(),
            );

            self.0
                .entry(spec)
                .or_insert_with(Spec::default)
                .push(Node::new(obji, name));
        }
    }

    pub fn module(&self) -> TokenStream {
        let mut mods = TokenStream::default();
        let mut syms = TokenStream::default();

        for (spec, s) in &self.0 {
            mods.extend(s.module(spec));
            syms.extend(s.symbols(quote! { &#spec }));
        }

        quote! {
            #![doc = "!! DO NOT EDIT !!: This file is auto-generated by oiddbgen."]

            #mods

            pub const DB: super::Database<'static> = super::Database(&[
                #syms
            ]);
        }
    }
}
